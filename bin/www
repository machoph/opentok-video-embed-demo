#!/usr/bin/env node

/**
 * Bootstraps and launches app listening on specified HTTP port
 */

const app = require('../app');
const debug = require('util').debuglog('app');
const http = require('http');
var https = require('https');
var fs = require('fs');
var env = process.env.NODE_ENV || 'development';
/**
 * Create HTTP server.
 */
var server = http.createServer(app);


/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || '3000';
app.set('port', port);

//ssl
if (env === 'development') {
    server = https.createServer({
        key: fs.readFileSync(__dirname + '/../server/server.key', 'utf8'),
        cert: fs.readFileSync(__dirname + '/../server/server.crt', 'utf8')
    }, app);
}


server.listen(port, function() {
    console.log('Listening on port ' + port);
    console.log('NODE_ENV  = ' + env);
   
});




server.on('error', on_error);
server.on('listening', on_listening);

/**
 * Event listener for HTTP server "error" event.
 */
function on_error(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function on_listening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
